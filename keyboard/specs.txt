The number and layout of the keyboard cells can be customized.
The contents of the keyboard cells can be customized.
The binary patterns to use for each input can be customized.

Each keyboard should be defined by a JSON file which gives:
- CSS for all layouts
- Cell content for each layout
- The binary pattern for each cell in each layout

As the scan proceeds, we need to:
- remove all special classes
- check which bits have been set
- filter out chars which don't match the bits currently set
- set their class to disabled
- highlight the active members of the current filtered set

Iterate through elements in `on` list and then `off` list
- 

layouts[layoutName] = [
  [
    {name: "x", num: 00}
  ]
]

scannedKeys = [
  [
    <element>
  ]
]

First pass:
- iterate through row and key of scannedKeys to get the element
- get the num from the same place in layout
- strip all littler bits off num
  - check if what's left matches current value
    - if so, check = num & currentBit !== 0
      - if check, className = "highlight"
      - if not, className = ""
    - if not, className = "disabled"
- if all bits treated, update preview

Second pass:
- iterate through row and key of scannedKeys to get the element
- get the num from the same place in layout
- strip all littler bits off num
  - check if what's left matches current value
    - if so, check = num & currentBit !== 0
      - if check != currentBit, className = "highlight"
      - otherwise, className = ""
    - if not, className = "disabled"
- update preview

TAB
===
A disabled user must use TAB to move focus. The TAB character should be readily accessible.

Input
=====
If user physically clicks on the textarea, it should accept direct key input. If the textarea has focus but did not get it from a click, then all key input should be considered as switch actions.

If an able user clicks on the textarea, a disabled user can no longer use switch scanning. If the user clicks anywhere but on the textarea, the textarea should revert to scanning.

Keydown
=======
A keydown action anywhere in the document will trigger a function. If the field with the current focus was clicked, the action will be allowed through to the field. If not, the action will be sent to the virtual keyboard.

A focus event is fired only if focus changes. A mousedown event fires at each click. If an able user clicks on the currently focused element, then userIsAble should remain true.

Correction
==========
In pass > 0, activating the switch may `remove` the value of bitValue, if that bit is currently set

Capitals
========
The first character of any text is likely to be a capital. The first character after a full stop is normally a capital. We need to show capitals in the keyboard by default, but the alternative elements need to remain lower case.

Some languages (such as Thai) don't have uppercase letters (or full stops).

The user should be able to capitalize any letter, using Punctuation > Uppercase > <next letter>. When UpperCase is true, the keyElements need to show it.

Punctuation > upperCase will automatically revert to ABC lower case for the next input, even if the previous layout was numbers or accents.
Punctuation > (Lock) > upperCase will automatically revert to ABC and remain in upperCase until Punctuation > upperCase is reselected.

Shortcuts
=========
Two spaces to create a full stop. Three to create a new line. Four to create an empty line.

Type keyboard choice twice to lock that keyboard. Type once to revert to previous keyboard after one character.

When a keyboard layout is chosen, the cell gets a red border. If you do not select it immediately, the keyboard will automatically revert.
If you do select it immediately, the name of the cell will change to ABC and the border will go green. You can now continue with the current layout until you choose a different one. If you choose another layout that is not ABC, the newly-selected layout will appear with a red border. Selecting it again will swap its name to ABC, and restore the name of the first alternative layout. Selecting something else will revert to the most recent layout. If you need to get back to ABC, you will need to select it explicitly.

Objects
=======
• Input
• Scanning
• Layout
  • Keyboard display
  • Bits display
  • Current input
  • Full text

*** Same bit pattern for all keys in all layouts ***

LayoutManager
=============
After each confirm action, ask the layoutManager if the layout needs to be updated.

• Confirm new layout
• Revert to earlier layout
• Lock current layout

Overview
========
The purpose of the virtual keyboard is to convert arbitrary on/off signals into meaningful words. To do this, we need:

* Input:
  a way to define a user action and test whether it has occurred
* Visual feedback: 
  - An onscreen keyboard
  - A bit display
  - The current character
  - The text written so far
* A scanning system
  - Speed
  - Order

Layout
======
(UpperCase)
Punctuation + uppercase
Numbers
More
layoutLock

prepareSpecialAction
  -> show action name

doSpecialAction
  -> append " " | act on TAB | change layout

LayoutManager.prototype.checkNext
  -> revert to previous layout if not locked
  -> adopt ABC layout if Punctuation > upperCase (not locked)

When the user selects a #special key, we need to:
- Check the `locked` flag.
  - If it is false
    - if the selected layout corresponds to the current layout
      -> set locked to true
    - ELSE (locked is false and layout not reselected)
      - if layout is Punctuation and key is #upperCase
        -> set upperCase to true (locked is already false)
        -> set the ABC layout (to show uppercase letters)
      -> revert to previous layout, unless current is ABC
  - ELSE (locked is true)
    - if the current layout is Punctuation and
      - the selected key is #upperCase
      -> set layout to ABC, with upperCase and capsLock both true
    - else (locked is true but not Punctuation && #upperCase)
      -> Do nothing
  - 

Confirm action
==============
The confirm action does one of two things:
- Enters a character (changes the model = output)
- Does a special action (affects the view and the controller)