The number and layout of the keyboard cells can be customized.
The contents of the keyboard cells can be customized.
The binary patterns to use for each input can be customized.

Each keyboard should be defined by a JSON file which gives:
- CSS for all layouts
- Cell content for each layout
- The binary pattern for each cell in each layout

As the scan proceeds, we need to:
- remove all special classes
- check which bits have been set
- filter out chars which don't match the bits currently set
- set their class to disabled
- highlight the active members of the current filtered set

Iterate through elements in `on` list and then `off` list
- 

layouts[layoutName] = [
  [
    {name: "x", num: 00}
  ]
]

scannedKeys = [
  [
    <element>
  ]
]

First pass:
- iterate through row and key of scannedKeys to get the element
- get the num from the same place in layout
- strip all littler bits off num
  - check if what's left matches current value
    - if so, check = num & currentBit !== 0
      - if check, className = "highlight"
      - if not, className = ""
    - if not, className = "disabled"
- if all bits treated, update preview

Second pass:
- iterate through row and key of scannedKeys to get the element
- get the num from the same place in layout
- strip all littler bits off num
  - check if what's left matches current value
    - if so, check = num & currentBit !== 0
      - if check != currentBit, className = "highlight"
      - otherwise, className = ""
    - if not, className = "disabled"
- update preview

TAB
===
A disabled user must use TAB to move focus. The TAB character should be readily accessible.

Input
=====
If user physically clicks on the textarea, it should accept direct key input. If the textarea has focus but did not get it from a click, then all key input should be considered as switch actions.

If an able user clicks on the textarea, a disabled user can no longer use switch scanning. If the user clicks anywhere but on the textarea, the textarea should revert to scanning.

Keydown
=======
A keydown action anywhere in the document will trigger a function. If the field with the current focus was clicked, the action will be allowed through to the field. If not, the action will be sent to the virtual keyboard.

A focus event is fired only if focus changes. A mousedown event fires at each click. If an able user clicks on the currently focused element, then userIsAble should remain true.

Correction
==========
In pass > 0, activating the switch may `remove` the value of bitValue, if that bit is currently set

Capitals
========
The first character of any text is likely to be a capital. The first character after a full stop is normally a capital. We need to show capitals in the keyboard by default, but the alternative elements need to remain lower case.

Some languages (such as Thai) don't have uppercase letters (or full stops).

The user should be able to capitalize any letter, using Edit > Uppercase > <next letter>. When UpperCase is true, the keyElements need to show it.

Shortcuts
=========
Two spaces to create a full stop. Three to create a new line. ()